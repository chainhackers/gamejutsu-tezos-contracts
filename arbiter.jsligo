/*
   ________                           ____.       __
  /  _____/_____    _____   ____     |    |__ ___/  |_  ________ __
 /   \  ___\__  \  /     \_/ __ \    |    |  |  \   __\/  ___/  |  \
 \    \_\  \/ __ \|  Y Y  \  ___//\__|    |  |  /|  |  \___ \|  |  /
  \______  (____  /__|_|  /\___  >________|____/ |__| /____  >____/
         \/     \/      \/     \/                          \/
https://tezos.gamejutsu.app
*/
// SPDX-License-Identifier: MIT
#include "gj_types.jsligo"

const disqualify = (g: game, p: key) =>
  ({...g, finished: true});

type storage = {
  games: games,
  next_game_id: nat
}

type parameter =
| ["DisputeMove", signed_game_move]
| ["ProposeGame", [address, key]]
| ["AcceptGame", [game_id, key]];

const dispute_move = ([store, signed_game_move] : [storage, signed_game_move]) => {
  const game_id = signed_game_move.game_move.game_id;
  return match(Map.find_opt(game_id, store.games), {
   Some: game => {
    const player = signed_game_move.game_move.player;
    //TODO check move validity using the rules contract
    //TODO check if player in game
    //TODO check signature
    ({...store, games:
    Map.update(
      game_id,  
      Some(disqualify(game, player)),
      store.games)
      });
   },
   None: () => failwith("No game.")
  });
};
    
const propose_game = ([store, rules, key] : [storage, address, key]) => {
    return match (Tezos.get_contract_opt(rules) as option<contract<unit>>, {
      Some: contract => {
            const new_game = {
              rules : rules, 
              started : false,
              finished: false,
              key_hash_to_player_id: Map.literal (list([
                [Crypto.hash_key(key), 1 as nat as player_id]
                ])),
              players: [key, None()],
              winner: 0 as nat
              };
          return {
            games: Map.update(
              store.next_game_id, Some(new_game), store.games
              ),
            next_game_id: store.next_game_id + (1 as nat)
          }
      },
      None: () => failwith("Rules contract not found.")
    });
};

const accept_game = ([store, game_id, key] : [storage, game_id, key]) => {
  return match(Map.find_opt (game_id, store.games), {
   Some: game => {
    const key_hash = Crypto.hash_key(key);
    if(Crypto.hash_key(game.players[0]) == key_hash){
      return failwith("You can't accept your own game.")
    };
    const started_game = {...game, 
      started: true,
      key_hash_to_player_id: Map.update(
        key_hash,
        Some(2 as nat),
        game.key_hash_to_player_id),
      players: [game.players[0], Some(key)]
      };
    return {...store,
      games: Map.update(
        game_id,
        Some(started_game),
        store.games
      )
    }
   },
   None: () => failwith("Game ID not found.")
  });
  };

const main = ([action, store] : [parameter, storage]) : [list <operation>, storage] => {
 return [
   list([]),
   (match (action, {
    DisputeMove: sgm => dispute_move ([store, sgm]),
    ProposeGame: rules_key => propose_game ([store, rules_key[0], rules_key[1]]),
    AcceptGame: game_id_key => accept_game ([store, game_id_key[0], game_id_key[1]])}))
  ]
};


const move_is_signed_by_mover = (signed_move: signed_game_move) => {
  const player = signed_move.game_move.player;
  const kh = Crypto.hash_key(player);
  return match(Map.find_opt (kh, signed_move.signatures), {
   Some: sig => {
    const move_packed = Bytes.pack(signed_move.game_move);
    Crypto.check(player, sig, move_packed);
   },
   None: () => false
  });
};

const player_is_in_game = (player: key, game_id: game_id) => false;

const game_move_is_signed_by = (game_move: game_move, key: key) => false;

const game_move_is_valid = (game_move: game_move) => false;
