/*
   ________                           ____.       __
  /  _____/_____    _____   ____     |    |__ ___/  |_  ________ __
 /   \  ___\__  \  /     \_/ __ \    |    |  |  \   __\/  ___/  |  \
 \    \_\  \/ __ \|  Y Y  \  ___//\__|    |  |  /|  |  \___ \|  |  /
  \______  (____  /__|_|  /\___  >________|____/ |__| /____  >____/
         \/     \/      \/     \/                          \/
https://tezos.gamejutsu.app
*/
// SPDX-License-Identifier: MIT

type game_id = nat;
type player_id = nat;

type game = { 
    rules : address,  //address of the contract defining game rules
    started : bool,
    finished: bool,
    key_hash_to_player_id: map<key_hash, player_id>,
    players: [key, option<key>],
    winner: player_id //finished && winner == 0 means draw
  } ;

type games = map<nat, game>;

type game_state = {
  game_id: game_id,
  nonce: nat,
  //everything specific to a particular game is `bytes`
  //these values are processed in separate rules contracts
  //while the arbiter stays rules-agnostic
  game_specific_state: bytes  
};

type game_move = {
  game_id: game_id,
  nonce: nat,
  player: key,
  old_state: bytes, //packed game-specific state where the move is made
  new_state: bytes, //packed game-specific state resulting from the move
  move: bytes       //packed game-specific move data
};

type signed_game_move = {
  game_move: game_move,
  signatures: map<key_hash, signature> //signatures of packed `game_move` by players
}

type validation_response = 
| ["MoveIsValid", [game_move, bool]];
type validate_game_move_params = [game_move, unit];
